Index: opensync-2.0.5.0/src/sm/src/sm_scan_schedule.c
===================================================================
--- opensync-2.0.5.0.orig/src/sm/src/sm_scan_schedule.c
+++ opensync-2.0.5.0/src/sm/src/sm_scan_schedule.c
@@ -76,6 +76,11 @@ void sm_scan_ctx_free(sm_scan_ctx_t *sca
 {
     if (NULL != scan_ctx)
     {
+    	LOG(DEBUG, "sm_scan_ctx_free. ctx:%p. %s %s %d\n",
+		scan_ctx,
+		radio_get_name_from_type(scan_ctx->scan_request.radio_cfg->type),
+		radio_get_scan_name_from_type(scan_ctx->scan_request.scan_type),
+		scan_ctx->scan_request.chan_list[0]);
         free(scan_ctx);
     }
 }
@@ -103,12 +108,20 @@ bool sm_scan_schedule_queue_flush ()
     sm_scan_ctx_t                  *scan_ctx = NULL;
     ds_dlist_iter_t                 queue_iter;
 
-    for (   scan_ctx = ds_dlist_ifirst(&queue_iter, &g_scan_ctx_list);
+    /*
+     * Skip the first scan context node in the list.
+     * It will be removed during scan_finish processing.
+     */
+    scan_ctx = ds_dlist_ifirst(&queue_iter, &g_scan_ctx_list);
+
+    for (   scan_ctx = ds_dlist_inext(&queue_iter);
+    //for ( scan_ctx = ds_dlist_ifirst(&queue_iter, &g_scan_ctx_list);
             scan_ctx != NULL;
             scan_ctx = ds_dlist_inext(&queue_iter))
     {
         LOG(ERR,
-            "Flushed scheduled %s %s %d scan queues",
+            "Flushed scheduled ctx:%p. %s %s %d scan queues",
+	    scan_ctx,
             radio_get_name_from_type(scan_ctx->scan_request.radio_cfg->type),
             radio_get_scan_name_from_type(scan_ctx->scan_request.scan_type),
             scan_ctx->scan_request.chan_list[0]);
@@ -117,8 +130,9 @@ bool sm_scan_schedule_queue_flush ()
         ds_dlist_iremove(&queue_iter);
         sm_scan_ctx_free(scan_ctx);
         scan_ctx = NULL;
+    	g_scan_queue_qty--;
     }
-    g_scan_queue_qty = 0;
+    //g_scan_queue_qty=0;
 
     return true;
 }
@@ -149,18 +163,26 @@ clean:
     }
 
     // Something went wrong, clean pending requests and exit
-    if (!scan_status) {
-        return sm_scan_schedule_queue_flush();
-    }
+    if (!scan_status)
+    	return sm_scan_schedule_queue_flush();
 
     /* Remove processed context */
+    if (scan_ctx && (ds_dlist_head(&g_scan_ctx_list) != scan_ctx)) {
+    	LOG(ERROR, "sm_scan_schedule_cb. Deleting a wrong scan_ctx. head:%p, ctx:%p. %s %s %d\n",
+		ds_dlist_head(&g_scan_ctx_list), scan_ctx,
+		radio_get_name_from_type(scan_ctx->scan_request.radio_cfg->type),
+		radio_get_scan_name_from_type(scan_ctx->scan_request.scan_type),
+		scan_ctx->scan_request.chan_list[0]);
+    }
+
     ds_dlist_remove_head(&g_scan_ctx_list);
-    LOG(DEBUG, "sm_scan_schedule_cb. Scan done. Deleting scan_ctx. %p. %s %s %d\n",
+    if (scan_ctx) {
+    	LOG(DEBUG, "sm_scan_schedule_cb. Scan done. Deleting scan_ctx. %p. %s %s %d\n",
 		scan_ctx,
 		radio_get_name_from_type(scan_ctx->scan_request.radio_cfg->type),
 		radio_get_scan_name_from_type(scan_ctx->scan_request.scan_type),
 		scan_ctx->scan_request.chan_list[0]);
-
+    }
     sm_scan_ctx_free(scan_ctx);
     scan_ctx = NULL;
 
@@ -310,13 +332,18 @@ bool sm_scan_schedule(
     }
     scan_ctx->scan_request  = *request;
 
+    LOG(DEBUG, "sm_scan_schedule. Allocated scan_ctx. ctx:%p. %s %s %d\n",
+		scan_ctx,
+		radio_get_name_from_type(scan_ctx->scan_request.radio_cfg->type),
+		radio_get_scan_name_from_type(scan_ctx->scan_request.scan_type),
+		scan_ctx->scan_request.chan_list[0]);
     g_scan_queue_qty++;
     ds_dlist_insert_tail(&g_scan_ctx_list, scan_ctx);
 
 
     if (NULL == scan_in_progress) {
         /* Trigger the scan and wait for results */
-	LOG(DEBUG, "sm_scan_schedule. Schedule scan request. %p. %s %s %d\n",
+	LOG(DEBUG, "sm_scan_schedule. Schedule scan request. ctx:%p. %s %s %d\n",
 		scan_ctx,
 		radio_get_name_from_type(scan_ctx->scan_request.radio_cfg->type),
 		radio_get_scan_name_from_type(scan_ctx->scan_request.scan_type),
@@ -353,7 +380,7 @@ bool sm_scan_schedule_stop (
         radio_scan_type_t           scan_type)
 {
     /* Stop scanning on target and flush pending scans to diff */
-    target_stats_scan_stop(radio_cfg, scan_type);
+    //target_stats_scan_stop(radio_cfg, scan_type);
 
     scan_schedule_timeout_timer_set(&g_scan_schedule_timer, false);
 
