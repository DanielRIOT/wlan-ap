--- a/src/main.c
+++ b/src/main.c
@@ -50,6 +50,9 @@ static void load_default_ca_cert(struct
 }
 #endif
 
+int force_exit = 0;
+int connected = 0;
+
 static void signal_cb(struct ev_loop *loop, ev_signal *w, int revents)
 {
     if (w->signum == SIGINT) {
@@ -72,6 +75,7 @@ static struct option long_options[] = {
 #endif
     {"verbose",     no_argument,       NULL, 'v'},
     {"version",     no_argument,       NULL, 'V'},
+    {"exit",        required_argument, NULL, 'e'},
     {"help",        no_argument,       NULL, LONG_OPT_HELP},
     {0, 0, 0, 0}
 };
@@ -104,11 +108,18 @@ static void usage(const char *prog)
     exit(1);
 }
 
+static void timeout_cb(EV_P_ ev_timer *w, int revents)
+{
+    if (!connected)
+           exit(1);
+}
+
 int main(int argc, char **argv)
 {
-    char shortopts[32] = "I:h:p:d:aDt:f:RS:vV";
+    char shortopts[32] = "I:h:p:d:aDt:f:RS:vVe:";
     struct ev_loop *loop = EV_DEFAULT;
     struct ev_signal signal_watcher;
+    struct ev_timer timeout_watcher;
     bool background = false;
     bool verbose = false;
     struct rtty rtty = {
@@ -208,6 +219,9 @@ int main(int argc, char **argv)
         case LONG_OPT_HELP:
             usage(argv[0]);
             break;
+	case 'e':
+	    force_exit = atoi(optarg);
+	    break;
         default: /* '?' */
             usage(argv[0]);
             break;
@@ -231,6 +245,10 @@ int main(int argc, char **argv)
 
     ev_signal_init(&signal_watcher, signal_cb, SIGINT);
     ev_signal_start(loop, &signal_watcher);
+    if (force_exit) {
+        ev_timer_init(&timeout_watcher, timeout_cb, force_exit, 0.);
+        ev_timer_start(loop, &timeout_watcher);
+    }
 
 #ifdef SSL_SUPPORT
     if (rtty.ssl_ctx && !has_cacert)
--- a/src/rtty.c
+++ b/src/rtty.c
@@ -37,6 +37,9 @@
 #include "command.h"
 #include "log/log.h"
 
+extern int force_exit;
+extern int connected;
+
 static char login_path[128];       /* /bin/login */
 
 static void del_tty(struct tty *tty)
@@ -61,6 +64,8 @@ static void del_tty(struct tty *tty)
     log_info("delete tty: %d\n", tty->sid);
 
     free(tty);
+    if (force_exit)
+	    exit(0);
 }
 
 static inline struct tty *find_tty(struct rtty *rtty, int sid)
@@ -73,6 +78,7 @@ static inline struct tty *find_tty(struc
 static inline void tty_logout(struct rtty *rtty, int sid)
 {
     struct tty *tty = find_tty(rtty, sid);
+
     if (tty)
         del_tty(tty);
 }
@@ -142,6 +148,8 @@ static void pty_on_exit(struct ev_loop *
     ev_io_start(loop, &rtty->iow);
 
     del_tty(tty);
+    if (force_exit)
+	    exit(0);
 }
 
 static void tty_timer_cb(struct ev_loop *loop, struct ev_timer *w, int revents)
@@ -217,6 +225,7 @@ static void tty_login(struct rtty *rtty)
     buffer_put_u8(&rtty->wb, sid);
     ev_io_start(rtty->loop, &rtty->iow);
 
+    connected = 1;
     log_info("new tty: %d\n", sid);
 
     return;
